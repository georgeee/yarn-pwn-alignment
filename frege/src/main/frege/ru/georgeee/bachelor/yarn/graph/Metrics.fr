module ru.georgeee.bachelor.yarn.graph.Metrics where

import frege.prelude.PreludeArrays
import frege.prelude.Math
import frege.java.Util
import frege.data.Traversable
import frege.data.Foldable
import frege.data.HashMap
import ru.georgeee.bachelor.yarn.graph.MetricsBase

measure :: MeasureMetrics -> [PreEdge t v] -> Double
measure mm pes = p1 * (foldr' ((+) . measurePE) 0 pes)
    where measurePE pe = (cost pe) * (p2 pe)
          p1 = (fromInt $ length pes :: Double) / (fromInt $ mm.totalPreedgeCount)
--          p1 = 1.0 / (fromInt $ mm.transSynsetCount)
          meaningCard pe = length $ filter (\pe' -> pe'.wordI == pe.wordI && pe.transMeaningI == pe'.transMeaningI) pes
          p2 = const 1.0
          cost pe = 1.0 / (fromInt $ meaningCard pe)

processNode = processNode' measure