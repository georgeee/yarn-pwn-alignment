module ru.georgeee.bachelor.yarn.graph.Metrics where

import frege.prelude.PreludeArrays
import frege.prelude.Math
import frege.java.Util
import frege.data.Traversable
import frege.data.Foldable
import frege.data.HashMap
import ru.georgeee.bachelor.yarn.graph.MetricsBase

data RandomGeneratorStub = pure native org.apache.commons.math3.random.RandomGenerator

data NormDistr = pure native org.apache.commons.math3.distribution.NormalDistribution where
    pure native new :: Maybe RandomGeneratorStub -> Double -> Double -> NormDistr
    pure native density :: NormDistr -> Double -> Double
    new' = new Nothing

data NormDistr1 = NormDistr1 { nd :: NormDistr, mult :: Double, mean :: Double }

normDistr1 :: Double -> Double -> NormDistr1
normDistr1 mean sd = NormDistr1 nd mult mean
    where nd = NormDistr.new' mean sd
          mult = 1.0 / nd.density mean

nd1Density :: NormDistr1 -> Double -> Double
nd1Density nd1 x = nd1.mult * nd1.nd.density x

nd1Density' nd1 x = if x <= nd1.mean then 1.0 else nd1Density nd1 x

-- measures similarity between two synsets
measure :: MetricsParams -> MeasureMetrics -> [PreEdge t v] -> Double
measure mp mm pes = (p1 p1M) * (foldr' ((+) . p2) 0 uniqueWords / fromInt uniqueWordsCount)
    where
          uniqueWordsCount = HashMap.size uniqueWords
          uniqueWords = filterUnique PreEdge.wordI pes
          p1M = (fromInt uniqueWordsCount) / (fromInt mm.origWordCount)

          minTransOrder wordI = minimum . map PreEdge.transOrderI . filter (\pe' -> pe'.wordI == wordI) $ pes

          -- smoothing function of p1M
          p1 wc = nd1Density' p1Nd1 (1 - wc)
          p1Nd1 = normDistr1 (1 - mp.p1Mean) mp.p1Sd

          -- measure of word
          p2 pe = nd1Density' p2Nd1 $ fromInt $ minTransOrder pe.wordI
          p2Nd1 = normDistr1 1 mp.p2Sd

          -- element amount in translation meaning
          meaningCard pe = length $ filter (\pe' -> pe'.wordI == pe.wordI && pe.transMeaningI == pe'.transMeaningI) pes

processNode = processNode' measure

filterUnique :: (Foldable f, Eq e) => (a -> e) -> f a -> HashMap e a
filterUnique m = foldr' f HashMap.empty
    where f a = HashMap.insert (m a) a
