module ru.georgeee.bachelor.yarn.graph.MetricsBase where

import frege.prelude.PreludeArrays
import frege.prelude.Math
import frege.java.Util
import frege.data.Traversable
import frege.data.Foldable
import frege.data.HashMap

type Word = String

data POS = pure native ru.georgeee.bachelor.yarn.graph.SynsetNode.POS

data Query = pure native ru.georgeee.bachelor.yarn.graph.Query where
    pure native new :: Word -> POS -> Query

data Node t v = native ru.georgeee.bachelor.yarn.graph.SynsetNode where
    native addEdge :: Mutable s (Node t v) -> Mutable s (Node v t) -> Double -> ST s ()
    native getWords :: Mutable s (Node t v) -> ST s (JList String)
    native getPOS :: Mutable s (Node t v) -> ST s POS

instance Eq (Node t v) where
    pure native == equals :: Node t v -> Node t v -> Bool
    pure native hashCode :: Node t v -> Int

data Repo t v = native ru.georgeee.bachelor.yarn.graph.NodeRepository where
    native getNode :: Mutable s (Repo t v) -> t -> STMutable s (Node t v)
    native findNode :: Mutable s (Repo t v) -> Query -> STMutable s (List (Node t v))

-- Be cautious, using this data type
-- list shouldn't violate it's contract (thus returning same values)
data JList e = pure native java.util.List where
    pure native get :: JList e -> Int -> Maybe e
    pure native size :: JList e -> Int

--Better rewrite with iterators
instance ListSource JList where
    toList l = impl 0
        where
              impl i | i < sz = let ls = impl (i + 1)
                                 in maybe ls (flip (:) ls) $ JList.get l i
                     | otherwise = []
              sz = JList.size l

data Dict = pure native ru.georgeee.bachelor.yarn.alignment.SimpleDict where
    pure native translate' translate :: Dict -> Word -> JList (JList Word)

    translate :: Dict -> Word -> [[Word]]
    translate d w = map toList . toList $ translate' d w

processNode' :: (MeasureMetrics -> [PreEdge v t] -> Double) -> Dict -> Mutable s (Repo v t) -> Mutable s (Node t v) -> ST s ()
processNode' measure dict repo node = do
    pos <- Node.getPOS node
    let findNode = Repo.findNode repo . flip Query.new pos
    ws <- toList <$> Node.getWords node
    let ts = map (Dict.translate dict) $ ws
    preEdges <- toPreEdges <$> (traverse . traverse . traverse) (findNode >=> fromJList) ts
    let preEdgesGrouped = groupBySynset preEdges
        metrics = MeasureMetrics { transSynsetCount = HashMap.size preEdgesGrouped
                                 , totalPreedgeCount = length preEdges
                                 , origWordCount = length ws
                                 }
        pes = (fmap . fmap) (measure metrics) $ HashMap.each preEdgesGrouped
    forM_ pes $ \(s, w) -> Node.addEdge node (mutable s) w

toPreEdges :: [[[[ Node t v ]]]] -> [PreEdge t v]
toPreEdges = fmap toPE . tp4
    where toPE (wI, (tmI, (toI, (tsI, s)))) = PreEdge wI tmI toI tsI s

instance Traversable ((,) a) where
    traverse f (x, y) = (,) x <$> f y

wI = zip ([1..] :: [Int])
tp1 = wI
tp2 = concat . fmap sequenceA . wI . fmap tp1
tp3 :: [[[a]]] -> [(Int, (Int, (Int, a)))]
tp3 = concat . fmap sequenceA . wI . fmap tp2
tp4 :: [[[[a]]]] -> [(Int, (Int, (Int, (Int, a))))]
tp4 = concat . fmap sequenceA . wI . fmap tp3

fromJList = Iterator.toList <=< List.iterator

groupBySynset :: [PreEdge t v] -> HashMap (Node t v) [PreEdge t v]
groupBySynset = foldr f HashMap.empty
    where f pe m = m.insert s arr'
            where arr' = maybe [pe] ((:) pe) $ m.lookup s
                  s = PreEdge.transSynset pe

data PreEdge t v = PreEdge
                       { wordI :: Int
                       , transMeaningI :: Int
                       , transOrderI :: Int
                       , transSynsetI :: Int
                       , transSynset :: Node t v
                       }

data MeasureMetrics = MeasureMetrics
                          { transSynsetCount :: Int
                          , totalPreedgeCount :: Int
                          , origWordCount :: Int
                          }
